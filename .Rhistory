cases = read.csv(".\\intermediate_data\\jhu_cases_01.26.2021.csv", check.names = FALSE)
deaths = read.csv(".\\intermediate_data\\jhu_deaths_01.26.2021.csv", check.names = FALSE)
population = read.csv(".\\intermediate_data\\world_bank_population.csv", check.names = FALSE)
indicators <- read.csv(".\\intermediate_data\\ghsi_summary.csv", check.names = FALSE)
#pivoting dates into rows and grouping by country code and date
cases_country_date <- cases[7:ncol(cases)]
cases_pivot <- pivot_longer(cases_country_date, cols= !contains("country_code"), names_to = "Date", values_to = "Cases")
cases_pivot_grouped <- aggregate(cases_pivot$Cases, by = list(Category = cases_pivot$country_code, cases_pivot$Date), FUN=sum)
deaths_country_date <- deaths[7:ncol(cases)]
deaths_pivot <- pivot_longer(deaths_country_date, cols= !contains("country_code"), names_to = "Date", values_to = "Deaths")
deaths_pivot_grouped <- aggregate(deaths_pivot$Deaths, by = list(Category = deaths_pivot$country_code, deaths_pivot$Date), FUN=sum)
#renaming columns
cases_pivot_grouped <- cases_pivot_grouped %>%
rename(
country_code = Category,
Date = Group.2,
Cases = x
)
deaths_pivot_grouped <- deaths_pivot_grouped %>%
rename(
country_code = Category,
Date = Group.2,
Deaths = x
)
#merging deaths and cases
deaths_and_cases <- merge(cases_pivot_grouped, deaths_pivot_grouped, by = c("country_code"="country_code", "Date"="Date"), all=TRUE)
# nonzero cases matrix,
nonzero_cases <- deaths_and_cases[deaths_and_cases$Cases >0, ]
nonzero_cases$clean_date <- as.Date(str_replace_all(nonzero_cases$Date, "X", ""), "%m.%d.%y")
#sorting by date
nonzero_cases_sort <- nonzero_cases %>%
group_by(country_code) %>%
arrange(clean_date) %>%
mutate(day_since_first_case=row_number())
#merging nonzero cases with population data
deaths_cases_population <- merge(nonzero_cases_sort, population, by = c("country_code"="country_code"), all.x = TRUE)
#calculating deaths, cases per capita and case fatality ratio
deaths_cases_population$casepc <- (deaths_cases_population$Cases / deaths_cases_population$pop_2019) * 1000
deaths_cases_population$deathpc <- (deaths_cases_population$Deaths / deaths_cases_population$pop_2019) * 1000
deaths_cases_population$cfratio <- (deaths_cases_population$Deaths / deaths_cases_population$Cases) * 100
deaths_cases_indicators <- merge(deaths_cases_population, indicators, by =c("country_code"="country_code"), all =TRUE)
# Cleaning up columns
deaths_cases_indicators %>% select(country_code, Cases, Deaths, clean_date, day_since_first_case,
pop_2019, casepc, deathpc, cfratio, overall, prev_emergence_pathogens, early_detection,
rapid_response, robust_health_sector, commitments, risk_environment)
# returns filtered dataframe for num_days after first case in country
# input a dataframe and a number of days after the start of an outbreak
sum_cases <- function(df, num_days) {
return(df[df$day_since_first_case == num_days, ])
}
one_month <- sum_cases(deaths_cases_indicators, 30)
two_month <- sum_cases(deaths_cases_indicators, 60)
six_month <- sum_cases(deaths_cases_indicators, 180)
write.csv(one_month,".\\prepped_data\\onemonth.csv", row.names = FALSE)
write.csv(two_month,".\\prepped_data\\twomonth.csv", row.names = FALSE)
write.csv(six_month,".\\prepped_data\\sixmonth.csv", row.names = FALSE)
library(tidyverse)
library(lubridate)
# reading in files
cases = read.csv(".\\intermediate_data\\jhu_cases_01.26.2021.csv", check.names = FALSE)
deaths = read.csv(".\\intermediate_data\\jhu_deaths_01.26.2021.csv", check.names = FALSE)
population = read.csv(".\\intermediate_data\\world_bank_population.csv", check.names = FALSE)
indicators <- read.csv(".\\intermediate_data\\ghsi_summary.csv", check.names = FALSE)
#pivoting dates into rows and grouping by country code and date
cases_country_date <- cases[7:ncol(cases)]
cases_pivot <- pivot_longer(cases_country_date, cols= !contains("country_code"), names_to = "Date", values_to = "Cases")
cases_pivot_grouped <- aggregate(cases_pivot$Cases, by = list(Category = cases_pivot$country_code, cases_pivot$Date), FUN=sum)
deaths_country_date <- deaths[7:ncol(cases)]
deaths_pivot <- pivot_longer(deaths_country_date, cols= !contains("country_code"), names_to = "Date", values_to = "Deaths")
deaths_pivot_grouped <- aggregate(deaths_pivot$Deaths, by = list(Category = deaths_pivot$country_code, deaths_pivot$Date), FUN=sum)
#renaming columns
cases_pivot_grouped <- cases_pivot_grouped %>%
rename(
country_code = Category,
Date = Group.2,
Cases = x
)
deaths_pivot_grouped <- deaths_pivot_grouped %>%
rename(
country_code = Category,
Date = Group.2,
Deaths = x
)
#merging deaths and cases
deaths_and_cases <- merge(cases_pivot_grouped, deaths_pivot_grouped, by = c("country_code"="country_code", "Date"="Date"), all=TRUE)
# nonzero cases matrix,
nonzero_cases <- deaths_and_cases[deaths_and_cases$Cases >0, ]
nonzero_cases$clean_date <- as.Date(str_replace_all(nonzero_cases$Date, "X", ""), "%m.%d.%y")
#sorting by date
nonzero_cases_sort <- nonzero_cases %>%
group_by(country_code) %>%
arrange(clean_date) %>%
mutate(day_since_first_case=row_number())
#merging nonzero cases with population data
deaths_cases_population <- merge(nonzero_cases_sort, population, by = c("country_code"="country_code"), all.x = TRUE)
#calculating deaths, cases per capita and case fatality ratio
deaths_cases_population$casepc <- (deaths_cases_population$Cases / deaths_cases_population$pop_2019) * 1000
deaths_cases_population$deathpc <- (deaths_cases_population$Deaths / deaths_cases_population$pop_2019) * 1000
deaths_cases_population$cfratio <- (deaths_cases_population$Deaths / deaths_cases_population$Cases) * 100
deaths_cases_indicators <- merge(deaths_cases_population, indicators, by =c("country_code"="country_code"), all =TRUE)
# Cleaning up columns
deaths_cases_indicators %>% select(country_code, Cases, Deaths, clean_date, day_since_first_case,
pop_2019, casepc, deathpc, cfratio, overall, prev_emergence_pathogens, early_detection,
rapid_response, robust_health_sector, commitments, risk_environment)
# returns filtered dataframe for num_days after first case in country
# input a dataframe and a number of days after the start of an outbreak
sum_cases <- function(df, num_days) {
return(df[df$day_since_first_case == num_days, ])
}
one_month <- sum_cases(deaths_cases_indicators, 30)
two_month <- sum_cases(deaths_cases_indicators, 60)
six_month <- sum_cases(deaths_cases_indicators, 180)
write.csv(one_month,".\\prepped_data\\onemonth.csv", row.names = FALSE)
write.csv(two_month,".\\prepped_data\\twomonth.csv", row.names = FALSE)
write.csv(six_month,".\\prepped_data\\sixmonth.csv", row.names = FALSE)
library(tidyverse)
library(lubridate)
# reading in files
cases = read.csv(".\\intermediate_data\\jhu_cases_01.26.2021.csv", check.names = FALSE)
deaths = read.csv(".\\intermediate_data\\jhu_deaths_01.26.2021.csv", check.names = FALSE)
population = read.csv(".\\intermediate_data\\world_bank_population.csv", check.names = FALSE)
indicators <- read.csv(".\\intermediate_data\\ghsi_summary.csv", check.names = FALSE)
#pivoting dates into rows and grouping by country code and date
cases_country_date <- cases[7:ncol(cases)]
cases_pivot <- pivot_longer(cases_country_date, cols= !contains("country_code"), names_to = "Date", values_to = "Cases")
cases_pivot_grouped <- aggregate(cases_pivot$Cases, by = list(Category = cases_pivot$country_code, cases_pivot$Date), FUN=sum)
deaths_country_date <- deaths[7:ncol(cases)]
deaths_pivot <- pivot_longer(deaths_country_date, cols= !contains("country_code"), names_to = "Date", values_to = "Deaths")
deaths_pivot_grouped <- aggregate(deaths_pivot$Deaths, by = list(Category = deaths_pivot$country_code, deaths_pivot$Date), FUN=sum)
#renaming columns
cases_pivot_grouped <- cases_pivot_grouped %>%
rename(
country_code = Category,
Date = Group.2,
Cases = x
)
deaths_pivot_grouped <- deaths_pivot_grouped %>%
rename(
country_code = Category,
Date = Group.2,
Deaths = x
)
#merging deaths and cases
deaths_and_cases <- merge(cases_pivot_grouped, deaths_pivot_grouped, by = c("country_code"="country_code", "Date"="Date"), all=TRUE)
# nonzero cases matrix,
nonzero_cases <- deaths_and_cases[deaths_and_cases$Cases >0, ]
nonzero_cases$clean_date <- as.Date(str_replace_all(nonzero_cases$Date, "X", ""), "%m.%d.%y")
#sorting by date
nonzero_cases_sort <- nonzero_cases %>%
group_by(country_code) %>%
arrange(clean_date) %>%
mutate(day_since_first_case=row_number())
#merging nonzero cases with population data
deaths_cases_population <- merge(nonzero_cases_sort, population, by = c("country_code"="country_code"), all.x = TRUE)
#calculating deaths, cases per capita and case fatality ratio
deaths_cases_population$casepc <- (deaths_cases_population$Cases / deaths_cases_population$pop_2019) * 1000
deaths_cases_population$deathpc <- (deaths_cases_population$Deaths / deaths_cases_population$pop_2019) * 1000
deaths_cases_population$cfratio <- (deaths_cases_population$Deaths / deaths_cases_population$Cases) * 100
deaths_cases_indicators <- merge(deaths_cases_population, indicators, by =c("country_code"="country_code"), all =TRUE)
# Cleaning up columns
deaths_cases_indicators <- deaths_cases_indicators %>% select(country_code, Cases, Deaths, clean_date, day_since_first_case,
pop_2019, casepc, deathpc, cfratio, overall, prev_emergence_pathogens, early_detection,
rapid_response, robust_health_sector, commitments, risk_environment)
# returns filtered dataframe for num_days after first case in country
# input a dataframe and a number of days after the start of an outbreak
sum_cases <- function(df, num_days) {
return(df[df$day_since_first_case == num_days, ])
}
one_month <- sum_cases(deaths_cases_indicators, 30)
two_month <- sum_cases(deaths_cases_indicators, 60)
six_month <- sum_cases(deaths_cases_indicators, 180)
write.csv(one_month,".\\prepped_data\\onemonth.csv", row.names = FALSE)
write.csv(two_month,".\\prepped_data\\twomonth.csv", row.names = FALSE)
write.csv(six_month,".\\prepped_data\\sixmonth.csv", row.names = FALSE)
library(tidyverse)
library(lubridate)
# reading in files
cases = read.csv(".\\intermediate_data\\jhu_cases_01.26.2021.csv", check.names = FALSE)
deaths = read.csv(".\\intermediate_data\\jhu_deaths_01.26.2021.csv", check.names = FALSE)
population = read.csv(".\\intermediate_data\\world_bank_population.csv", check.names = FALSE)
indicators <- read.csv(".\\intermediate_data\\ghsi_summary.csv", check.names = FALSE)
#pivoting dates into rows and grouping by country code and date
cases_country_date <- cases[7:ncol(cases)]
cases_pivot <- pivot_longer(cases_country_date, cols= !contains("country_code"), names_to = "Date", values_to = "Cases")
cases_pivot_grouped <- aggregate(cases_pivot$Cases, by = list(Category = cases_pivot$country_code, cases_pivot$Date), FUN=sum)
deaths_country_date <- deaths[7:ncol(cases)]
deaths_pivot <- pivot_longer(deaths_country_date, cols= !contains("country_code"), names_to = "Date", values_to = "Deaths")
deaths_pivot_grouped <- aggregate(deaths_pivot$Deaths, by = list(Category = deaths_pivot$country_code, deaths_pivot$Date), FUN=sum)
#renaming columns
cases_pivot_grouped <- cases_pivot_grouped %>%
rename(
country_code = Category,
Date = Group.2,
Cases = x
)
deaths_pivot_grouped <- deaths_pivot_grouped %>%
rename(
country_code = Category,
Date = Group.2,
Deaths = x
)
#merging deaths and cases
deaths_and_cases <- merge(cases_pivot_grouped, deaths_pivot_grouped, by = c("country_code"="country_code", "Date"="Date"), all=TRUE)
# nonzero cases matrix,
nonzero_cases <- deaths_and_cases[deaths_and_cases$Cases >0, ]
nonzero_cases$clean_date <- as.Date(str_replace_all(nonzero_cases$Date, "X", ""), "%m.%d.%y")
#sorting by date
nonzero_cases_sort <- nonzero_cases %>%
group_by(country_code) %>%
arrange(clean_date) %>%
mutate(day_since_first_case=row_number())
#merging nonzero cases with population data
deaths_cases_population <- merge(nonzero_cases_sort, population, by = c("country_code"="country_code"), all.x = TRUE)
#calculating deaths, cases per capita and case fatality ratio
deaths_cases_population$casepc <- (deaths_cases_population$Cases / deaths_cases_population$pop_2019) * 1000
deaths_cases_population$deathpc <- (deaths_cases_population$Deaths / deaths_cases_population$pop_2019) * 1000
deaths_cases_population$cfratio <- (deaths_cases_population$Deaths / deaths_cases_population$Cases) * 100
deaths_cases_indicators <- merge(deaths_cases_population, indicators, by =c("country_code"="country_code"), all =TRUE)
# Cleaning up columns
deaths_cases_indicators <- deaths_cases_indicators %>% select(country_code, Cases, Deaths, clean_date, day_since_first_case,
pop_2019, casepc, deathpc, cfratio, overall, prev_emergence_pathogens, early_detection,
rapid_response, robust_health_sector, commitments, risk_environment)
# returns filtered dataframe for num_days after first case in country
# input a dataframe and a number of days after the start of an outbreak
sum_cases <- function(df, num_days) {
return(df[df$day_since_first_case == num_days, ])
}
one_month <- sum_cases(deaths_cases_indicators, 30)
two_month <- sum_cases(deaths_cases_indicators, 60)
six_month <- sum_cases(deaths_cases_indicators, 180)
write.csv(one_month,".\\prepped_data\\onemonth.csv", row.names = FALSE)
write.csv(two_month,".\\prepped_data\\twomonth.csv", row.names = FALSE)
write.csv(six_month,".\\prepped_data\\sixmonth.csv", row.names = FALSE)
# Main pipeline that runs all data prep and analysis steps.
# You will need to be in the root of the repository for this to work!
stopifnot(grepl("data_557", getwd()))
# First take the "raw" data, add country code, and save to "intermediates" folder.
source('add_country_code.R')
# Returns csv files with cases after one month, two months and six months and saves to "prepped" folder.
source('First case.R')
# Then, take this intermediates data, clean and merge it, and save to "prepped" folder.
source('prep_data.R')
# Main pipeline that runs all data prep and analysis steps.
# You will need to be in the root of the repository for this to work!
stopifnot(grepl("data_557", getwd()))
# First take the "raw" data, add country code, and save to "intermediates" folder.
source('add_country_code.R')
source('First case.R')
# Then, take this intermediates data, clean and merge it, and save to "prepped" folder.
source('prep_data.R')
# Main pipeline that runs all data prep and analysis steps.
# You will need to be in the root of the repository for this to work!
stopifnot(grepl("data_557", getwd()))
# First take the "raw" data, add country code, and save to "intermediates" folder.
source('add_country_code.R')
#source('First case.R')
# Then, take this intermediates data, clean and merge it, and save to "prepped" folder.
source('prep_data.R')
**1.3**
**1.3**
**1.3**
**1.3**
**1.3**
**1.3**
**1.3**
**1.3**
**1.3**```{r}
fevdata = read.csv("C:\\Users\\geier\\Documents\\Applied Stats\\Homework7\\fev.csv")
summary(lm(fev ~ height, data=fevdata))$coef
summary(lm(fev ~ ht, data=fevdata))$coef
summary(lm(fev ~ ht + age, data=fevdata))$coef
lm(fev ~ ht + age, data=fevdata)
summary(lm(fev ~ ht + age, data=fevdata))
summary(lm(age ~ ht, data=fevdata))
summary(lm(ht ~ age, data=fevdata))
correlation = sqrt(0.6272)
correlation
response = fevdata$fev
n = nrow(fevdata)
predictors = cbind(rep(1,n), fevdata$ht, fevdata$age)
solve(t(response) %*% predictors)
response = fevdata$fev
n = nrow(fevdata)
predictors = cbind(rep(1,n), fevdata$ht, fevdata$age)
solve(t(predictors) %*% predictors)
summary(lm(ht ~ age, data=fevdata))
summary(lm(fev ~ ht + age, data=fevdata))
summary(lm(fev ~ ht, data=fevdata))
summary(lm(fev ~ ht, data=fevdata))$coef
beta[1]
solve(t(predictors) %*% predictors) %*% t(x) %*% response
beta = solve(t(predictors) %*% predictors) %*% t(predictors) %*% response
beta
summary(lm(fev ~ ht, data=fevdata))
predictors1 = cbind(rep(1,n), fevdata$ht)
beta = solve(t(predictors1) %*% predictors1) %*% t(predictors1) %*% response
beta
beta = 0.131976
sebeta = 0.002955
test.statistic = beta/sebeta
p.value = 2*(1-pt(abs(test.statistic), df = n-1))
p.value
test.statistic
summary(lm(fev ~ ht, data=fevdata))
summary(lm(fev ~ ht + age, data=fevdata))
n
summary(lm(fev ~ ht + age, data=fevdata))
beta2 = 0.109712
sebeta2 = 0.004716
test.statistic = beta2/sebeta2
p.value = 2*(1-pt(abs(test.statistic), df = n-2))
summary(lm(fev ~ ht + age, data=fevdata))
beta2 = 0.109712
sebeta2 = 0.004716
test.statistic = beta2/sebeta2
p.value2 = 2*(1-pt(abs(test.statistic), df = n-2))
p.value2
test.statistic
summary(lm(fev ~ ht, data=fevdata))
beta = 0.131976
sebeta = 0.002955
test.statistic = beta/sebeta
p.value = 2*(1-pt(abs(test.statistic), df = n-2))
p.value
test.statistic
summary(lm(fev ~ ht + age, data=fevdata))
beta2 = 0.109712
sebeta2 = 0.004716
test.statistic = beta2/sebeta2
p.value2 = 2*(1-pt(abs(test.statistic), df = n-3))
summary(lm(fev ~ ht + age, data=fevdata))
beta2 = 0.109712
sebeta2 = 0.004716
test.statistic2 = beta2/sebeta2
p.value2 = 2*(1-pt(abs(test.statistic), df = n-3))
test.statistic2
anova(lm(fev~ht*age, data=fevdata))
anova(lm(fev~ht, data=fevdata))
anova(lm(fev~ht*age, data=fevdata))
SSE.full = 103.16
df.full = 650
anova(lm(fev~ht, data=fevdata))
SSE.red = 120.93
df.red = 652
num = (SSE.red - SSE.full) / (df.red - df.full)
den = SSE.full / df.full
num/den
p.value3 = 2*(1-pf(abs(test.statistic3), df.red-df.full, df.full))
num = (SSE.red - SSE.full) / (df.red - df.full)
den = SSE.full / df.full
test.statistic3 = num/den
p.value3 = 2*(1-pf(abs(test.statistic3), df.red-df.full, df.full))
p.value3
summary(lm(fev ~ age + male + ht + smoke, data=fevdata))$coef
summary(lm(fev ~ age + factor(male) + ht + factor(smoke), data=fevdata))$coef
plot(lm(fev ~ age + factor(male) + ht + factor(smoke), data=fevdata), which = 1)
plot(lm(fev ~ age + factor(male) + ht + factor(smoke), data=fevdata), which = 2)
plot(lm(fev ~ age + factor(male) + ht + factor(smoke), data=fevdata))
plot(lm(fev ~ age + factor(male) + ht + factor(smoke), data=fevdata), which = 2)
plot(lm(fev ~ age + factor(male) + ht + factor(smoke), data=fevdata), which = 1)
summary(lm(ht ~ age, data=fevdata))
correlation = sqrt(0.6272)
correlation
anova(lm(fev~ht+age, data=fevdata))
SSE.full = 103.16
df.full = 650
anova(lm(fev~ht, data=fevdata))
SSE.red = 120.93
df.red = 652
num = (SSE.red - SSE.full) / (df.red - df.full)
den = SSE.full / df.full
test.statistic3 = num/den
p.value3 = 2*(1-pf(abs(test.statistic3), df.red-df.full, df.full))
test.statistic3
p.value3
anova(lm(fev~ht*age, data=fevdata))
SSE.full = 103.16
df.full = 650
anova(lm(fev~ht+age, data=fevdata))
SSE.full = 103.16
df.full = 650
anova(lm(fev~ht*age, data=fevdata))
SSE.full = 114.67
df.full = 651
anova(lm(fev~ht, data=fevdata))
SSE.red = 120.93
df.red = 652
num = (SSE.red - SSE.full) / (df.red - df.full)
den = SSE.full / df.full
test.statistic3 = num/den
p.value3 = 2*(1-pf(abs(test.statistic3), df.red-df.full, df.full))
test.statistic3
p.value3
anova(lm(fev~ht+age, data=fevdata))
SSE.full = 114.67
df.full = 651
anova(lm(fev~ht, data=fevdata))
SSE.red = 120.93
df.red = 652
num = (SSE.red - SSE.full) / (df.red - df.full)
den = SSE.full / df.full
test.statistic3 = num/den
p.value3 = 2*(1-pf(abs(test.statistic3), df.red-df.full, df.full))
sixmonth_data = na.omit(read.csv(".\\prepped_data\\sixmonth.csv"))
summary(lm(casepc ~ overall, data = sixmonth_data))$coef
par(mfrow=c(2,2),mar=c(5,4,2,1))
plot(lm(casepc ~ overall, data = sixmonth_data))
summary(lm(deathpc ~ overall, data = sixmonth_data))$coefficients
par(mfrow=c(2,2),mar=c(5,4,2,1))
plot(lm(deathpc ~ overall, data = sixmonth_data))
summary(lm(cfratio ~ overall, data = sixmonth_data))$coefficients
par(mfrow=c(2,2),mar=c(5,4,2,1))
plot(lm(cfratio ~ overall, data = sixmonth_data))
View(sixmonth_data)
View(sixmonth_data)
names(sixmonth_data)
subcomponents <- c("prev_emergence_pathogens", "early_detection", "rapid_response", "robust_health_sector", "commitments", "risk_environment")
for(i in subcomponents) {
summary(lm(casepc ~ i, data = sixmonth_data))$coef
par(mfrow=c(2,2),mar=c(5,4,2,1))
plot(lm(cfratio ~ i, data = sixmonth_data))
}
subcomponents <- c("prev_emergence_pathogens", "early_detection", "rapid_response", "robust_health_sector", "commitments", "risk_environment")
for(i in 1: subcomponents) {
summary(lm(casepc ~ i, data = sixmonth_data))$coef
par(mfrow=c(2,2),mar=c(5,4,2,1))
plot(lm(cfratio ~ i, data = sixmonth_data))
}
subcomponents <- c("prev_emergence_pathogens", "early_detection", "rapid_response", "robust_health_sector", "commitments", "risk_environment")
for(i in subcomponents) {
summary(lm(casepc ~ i, data = sixmonth_data))$coef
par(mfrow=c(2,2),mar=c(5,4,2,1))
plot(lm(cfratio ~ i, data = sixmonth_data))
}
subcomponents <- c(prev_emergence_pathogens, early_detection, rapid_response, robust_health_sector, commitments, risk_environment)
for(i in subcomponents) {
summary(lm(casepc ~ i, data = sixmonth_data))$coef
par(mfrow=c(2,2),mar=c(5,4,2,1))
plot(lm(cfratio ~ i, data = sixmonth_data))
}
for(i in 11:ncol(sixmonth_data)) {
predictor_i <- colnames(sixmonth_data)[i]
summary(lm(casepc ~ ., data = sixmonth_data[,c(casepc,predictor_i)]))$coef
par(mfrow=c(2,2),mar=c(5,4,2,1))
plot(lm(casepc ~ ., data = sixmonth_data[,c(casepc,predictor_i)]))
}
for(i in 11:ncol(sixmonth_data)) {
predictor_i <- colnames(sixmonth_data)[i]
summary(lm(casepc ~ ., data = sixmonth_data[,c("casepc",predictor_i)]))$coef
par(mfrow=c(2,2),mar=c(5,4,2,1))
plot(lm(casepc ~ ., data = sixmonth_data[,c("casepc",predictor_i)]))
}
for(i in 1:subcomponents) {
predictor_i <- colnames(sixmonth_data)[i]
print(summary(lm(casepc ~ ., data = sixmonth_data[,c("casepc",predictor_i)]))$coef)
par(mfrow=c(2,2),mar=c(5,4,2,1))
plot(lm(casepc ~ ., data = sixmonth_data[,c("casepc",predictor_i)]))
}
for(i in subcomponents) {
predictor_i <- colnames(sixmonth_data)[i]
print(summary(lm(casepc ~ ., data = sixmonth_data[,c("casepc",predictor_i)]))$coef)
par(mfrow=c(2,2),mar=c(5,4,2,1))
plot(lm(casepc ~ ., data = sixmonth_data[,c("casepc",predictor_i)]))
}
for(i in 1:length(subcomponents)) {
predictor_i <- colnames(sixmonth_data)[i]
print(summary(lm(casepc ~ ., data = sixmonth_data[,c("casepc",predictor_i)]))$coef)
par(mfrow=c(2,2),mar=c(5,4,2,1))
plot(lm(casepc ~ ., data = sixmonth_data[,c("casepc",predictor_i)]))
}
knitr::opts_chunk$set(echo = TRUE)
subcomponents <- c(prev_emergence_pathogens, early_detection, rapid_response, robust_health_sector, commitments, risk_environment)
subcomponents <- c("prev_emergence_pathogens", "early_detection", "rapid_response", "robust_health_sector", "commitments", "risk_environment")
for(i in 1:length(subcomponents)) {
predictor_i <- (sixmonth_data)[, i]
print(summary(lm(casepc ~ ., data = sixmonth_data[,c("casepc",predictor_i)]))$coef)
par(mfrow=c(2,2),mar=c(5,4,2,1))
plot(lm(casepc ~ ., data = sixmonth_data[,c("casepc",predictor_i)]))
}
subcomponents <- c("prev_emergence_pathogens", "early_detection", "rapid_response", "robust_health_sector", "commitments", "risk_environment")
for(i in 1:length(subcomponents)) {
predictor_i <- (sixmonth_data)[i,]
print(summary(lm(casepc ~ ., data = sixmonth_data[,c("casepc",predictor_i)]))$coef)
par(mfrow=c(2,2),mar=c(5,4,2,1))
plot(lm(casepc ~ ., data = sixmonth_data[,c("casepc",predictor_i)]))
}
subcomponents <- c("prev_emergence_pathogens", "early_detection", "rapid_response", "robust_health_sector", "commitments", "risk_environment")
for(i in 1:length(subcomponents)) {
predictor_i <- (subcompenents)[i]
print(summary(lm(casepc ~ ., data = sixmonth_data[,c("casepc",predictor_i)]))$coef)
par(mfrow=c(2,2),mar=c(5,4,2,1))
plot(lm(casepc ~ ., data = sixmonth_data[,c("casepc",predictor_i)]))
}
subcomponents <- c("prev_emergence_pathogens", "early_detection", "rapid_response", "robust_health_sector", "commitments", "risk_environment")
for(i in 1:length(subcomponents)) {
predictor_i <- (subcomponents)[i]
print(summary(lm(casepc ~ ., data = sixmonth_data[,c("casepc",predictor_i)]))$coef)
par(mfrow=c(2,2),mar=c(5,4,2,1))
plot(lm(casepc ~ ., data = sixmonth_data[,c("casepc",predictor_i)]))
}
for(i in 11:ncol(sixmonth_data)) {
predictor_i <- colnames(sixmonth_data)[i]
print(summary(lm(casepc ~ ., data = sixmonth_data[,c("casepc",predictor_i)]))$coef)
par(mfrow=c(2,2),mar=c(5,4,2,1))
plot(lm(casepc ~ ., data = sixmonth_data[,c("casepc",predictor_i)]))
}
for(i in 1:length(subcomponents)) {
predictor_i <- (subcomponents)[i]
print(summary(lm(casepc ~ ., data = sixmonth_data[,c("casepc",predictor_i)]))$coef)
par(mfrow=c(2,2),mar=c(5,4,2,1))
plot(lm(casepc ~ ., data = sixmonth_data[,c("casepc",predictor_i)]))
}
